import numpy as np
from pandas import array
from src.fields import ScalarField


class LaplaceEquationSolver:
    """
    A Laplace equation solver used to compute the resultant potential field P in 2D-space generated by a constant
    voltage field V (for example due to wires).
    """

    def __init__(self, nb_iterations: int = 1000):
        """
        Laplace solver constructor. Used to define the number of iterations for the relaxation method.

        Parameters
        ----------
        nb_iterations : int
            Number of iterations performed to obtain the potential by the relaxation method (default = 1000).
        """
        self.nb_iterations = nb_iterations

    def solve(self, constant_voltage: ScalarField) -> ScalarField:
        """
        Solve the Laplace equation to compute the potential field given a constant voltage field.

        Parameters
        ----------
        constant_voltage : ScalarField
            A scalar field V : ℝ² → ℝ ; (x, y) → V(x, y), where V(x, y) is the wires' voltage at a given point (x, y)
            in space.

        Returns
        -------
        potential : ScalarField
            A scalar field P : ℝ² → ℝ ; (x, y) → P(x, y), where P(x, y) is the electric potential at a given point
            (x, y) in space. The difference between P and V is that P gives the potential in the whole world, i.e in
            the wires and in the empty space between the wires, while the field V always gives V(x, y) = 0 if (x, y)
            is not a point belonging to an electric wire.
        """

        #Le but de cette boucle est de trouver les valeurs de voltage qui sont fixes pour éviter de les perdre après la moyenne.

        nonZero_voltage_list = []

        for row_number, row in enumerate(constant_voltage):
            for column_number, voltage_value in enumerate(row):
                if voltage_value != 0:
                    nonZero_voltage_list.append([column_number, row_number, voltage_value])


        horizontal_empty_array = np.zeros((1, column_number+1))
        vertical_empty_array = np.zeros((1, row_number+1)).T


        for i in range(0, self):
            Decal_D = np.concatenate((vertical_empty_array, constant_voltage[:, :-1]), axis=1)
            Decal_G = np.concatenate((constant_voltage[:, 1:], vertical_empty_array), axis=1)
            Decal_H = np.concatenate((constant_voltage[1:, :], horizontal_empty_array), axis=0)
            Decal_B = np.concatenate((horizontal_empty_array, constant_voltage[:-1, :]), axis=0)


            constant_voltage = (Decal_D + Decal_G + Decal_H + Decal_B)/4

            for value in nonZero_voltage_list:
                constant_voltage[value[1], value[0]]= value[2]
            
        return ScalarField(constant_voltage)























