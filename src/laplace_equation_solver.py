import numpy as np

from src.fields import ScalarField


class LaplaceEquationSolver:
    """
    A Laplace equation solver used to compute the resultant potential field P in 2D-space generated by a constant
    voltage field V (for example due to wires).
    """

    def __init__(self, nb_iterations: int = 1000):
        """
        Laplace solver constructor. Used to define the number of iterations for the relaxation method.

        Parameters
        ----------
        nb_iterations : int
            Number of iterations performed to obtain the potential by the relaxation method (default = 1000).
        """
        self.nb_iterations = nb_iterations

    def solve(self, constant_voltage: ScalarField) -> ScalarField:
        """
        Solve the Laplace equation to compute the potential field given a constant voltage field.

        Parameters
        ----------
        constant_voltage : ScalarField
            A scalar field V : ℝ² → ℝ ; (x, y) → V(x, y), where V(x, y) is the wires' voltage at a given point (x, y)
            in space.

        Returns
        -------
        potential : ScalarField
            A scalar field P : ℝ² → ℝ ; (x, y) → P(x, y), where P(x, y) is the electric potential at a given point
            (x, y) in space. The difference between P and V is that P gives the potential in the whole world, i.e in
            the wires and in the empty space between the wires, while the field V always gives V(x, y) = 0 if (x, y)
            is not a point belonging to an electric wire.
        """

        bord_H = np.array([constant_voltage[0, 1:-1]])
        bord_D = np.array([constant_voltage[:-1, -1]]).T
        bord_B = np.array([constant_voltage[-1, 1:]])
        bord_G = np.array([constant_voltage[:, 0]]).T

        for i in range(0, self.nb_iterations):

            Champs_Moy = (constant_voltage[2:, 1:-1] + constant_voltage[1:-1, 2:] + constant_voltage[:-2, 1:-1] + constant_voltage[1:-1, :-2])/4

            Transition_Matrice = np.concatenate((bord_H, Champs_Moy))
            Transition_Matrice = np.concatenate((Transition_Matrice, bord_D), axis=1)
            Transition_Matrice = np.concatenate((Transition_Matrice, bord_B))
            Transition_Matrice = np.concatenate((bord_G, Transition_Matrice), axis=1)

            constant_voltage = ScalarField(Transition_Matrice)

        return constant_voltage